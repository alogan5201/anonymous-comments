/*!
* GeoTools
* Boilerplate for a Static website using EJS and SASS
* example.com
* @author Brenton Cozby -- https://brentoncozby.com
* Copyright 2022. MIT Licensed.
*/

!function(n){var e={};function t(o){if(e[o])return e[o].exports;var a=e[o]={i:o,l:!1,exports:{}};return n[o].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var a in n)t.d(o,a,function(e){return n[e]}.bind(null,a));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="/js/",t(t.s=32)}({32:function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(33);\n\n\n//# sourceURL=webpack:///multi_./src/js/weather.js?")},33:function(module,exports){eval('/*jshint esversion: 8 */\nlet geojson = {\n  type: "FeatureCollection",\n  features: [{\n    type: "Feature",\n    geometry: {\n      type: "Point",\n      coordinates: [0, 0]\n    },\n    properties: {\n      currentWeather: "",\n      temp: "",\n      image: "",\n      "marker-color": "#35A2D1",\n      "marker-size": "large"\n    }\n  }]\n};\n\nfunction inputFocus(x) {\n  if ($("#secondOutput").hasClass("second")) {\n    $("#secondOutput").removeClass("second").addClass("fadeOut");\n    $("#firstOutput").removeClass("first").addClass("fadeOut");\n    setTimeout(() => {\n      $("#secondOutput").addClass("d-none");\n      $("#firstOutput").addClass("d-none");\n    }, 2000);\n  } //\n\n}\n\nwindow.addEventListener("DOMContentLoaded", () => {\n  let scrollPos = 0;\n  const mainNav = document.getElementById("mainNav");\n  const headerHeight = mainNav.clientHeight;\n\n  function ConvertDMSToDD(degrees, minutes, seconds, direction) {\n    var dd = degrees + minutes / 60 + seconds / (60 * 60);\n\n    if (direction == "S" || direction == "W") {\n      dd = dd * -1;\n    } // Don\'t do anything for N or E\n\n\n    return dd;\n  }\n\n  const north = document.getElementById("north");\n  const south = document.getElementById("south");\n  const degreesLat = document.getElementById("degrees-lat");\n  const minutesLat = document.getElementById("minutes-lat");\n  const secondsLat = document.getElementById("seconds-lat");\n  const degreesLon = document.getElementById("degrees-lon");\n  const minutesLon = document.getElementById("minutes-lon");\n  const secondsLon = document.getElementById("seconds-lon");\n  const east = document.getElementById("east");\n  const west = document.getElementById("west");\n  const outputInputField = document.getElementById("output-field-input");\n  const dmsBtn = document.getElementById("dmsBtn");\n  const dmsForm = document.getElementById("dms");\n  const latlonForm = document.getElementById("latlonForm");\n\n  function DDtoDMS(lat, lon) {\n    //\n    let latitude = Math.abs(lat);\n    let longitude = Math.abs(lon);\n    let dLat = Math.floor(latitude);\n    let mLat = Math.floor((latitude - dLat) * 60);\n    sLat = Math.round((latitude - dLat - mLat / 60) * 1e3 * 3600) / 1e3;\n    dLon = Math.floor(longitude);\n    mLon = Math.floor((longitude - dLon) * 60);\n    sLon = Math.floor((longitude - dLon - mLon / 60) * 1e3 * 3600) / 1e3;\n    let degreesLatitude = dLat;\n    let minutesLatitude = mLat;\n    let secondsLatitude = sLat;\n    let degreesLongitude = dLon;\n    let minutesLongitude = mLon;\n    let secondsLongitude = sLon;\n    let latResult = `${degreesLatitude}° ${minutesLatitude}\' ${secondsLatitude}\'\'`;\n    let lonResult = `${degreesLongitude}° ${minutesLongitude}\' ${secondsLongitude}\'\'`;\n    let result = {\n      lat: latResult,\n      lon: lonResult\n    };\n    return result;\n  }\n\n  function check(elm) {\n    document.getElementById(elm).checked = true;\n  }\n\n  const convertLocationData = document.getElementById("convertLocationData");\n  const latInputField = document.getElementById("latInputField");\n  const lonInputField = document.getElementById("lonInputField");\n\n  const App = function _App() {\n    return `\n   <h1>Global State = [${App.state.count}] </h1>\n  `;\n  };\n\n  const handler = {\n    set: function (obj, prop, value) {\n      obj[prop] = value;\n    }\n  };\n  App.state = new Proxy({\n    count: 0\n  }, handler); // Initial Loading of the App\n\n  const CoordsApp = function _CoordsApp() {\n    return `\n   <h1>Origin State = [${CoordsApp.state.origin}] </h1> </br>\n   <h1>Destination State = [${CoordsApp.state.destination}] </h1>\n   <h1>User Location = [${CoordsApp.state.userLocation}] </h1>\n   <h1>trackingUser =  ${CoordsApp.state.trackingUser}</h1>\n  `;\n  };\n\n  const myhandler = {\n    set: function (obj, prop, value) {\n      obj[prop] = value;\n    }\n  };\n  CoordsApp.state = new Proxy({\n    origin: [],\n    destination: [],\n    userLocation: []\n  }, myhandler);\n  L.mapbox.accessToken = "pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQybTFoZzE0aDQyeXM1aGNmYnR1MnoifQ.4kRWNfEH_Yao_mmdgrgjPA";\n\n  const finishedLoading = () => {\n    setTimeout(function () {// then, after a half-second, add the class \'hide\', which hides\n      // it completely and ensures that the user can interact with the\n      // map again.\n    }, 500);\n  };\n\n  const map = L.mapbox.map("map").setView([37.9, -77], 6);\n  L.mapbox.styleLayer("mapbox://styles/mapbox/streets-v11").addTo(map) // add your tiles to the map\n  .on("load", finishedLoading); //var myLayer = L.mapbox.featureLayer().addTo(map);\n\n  const marker = L.marker([0, 0], {\n    icon: L.mapbox.marker.icon({\n      "marker-size": "large",\n      "marker-color": "blue"\n    })\n  }).addTo(map); // L.marker is a low-level marker constructor in Leaflet.\n\n  var locationControl = L.control.locate({\n    circleStyle: {\n      opacity: 0\n    },\n    followCircleStyle: {\n      opacity: 0\n    },\n    drawCircle: false,\n    follow: false,\n    icon: "fas fa-map-marker-alt",\n    // follow the user\'s location\n    setView: false,\n    remainActive: false\n  }).addTo(map);\n  map.on("locationfound", function (e) {\n    let lat = e.latitude;\n    let lon = e.longitude;\n    var radius = e.accuracy;\n    (async () => {\n      const address = await convertLatLon(lat, lon);\n\n      if (address.features[0]) {\n        $("input").first().val(address.features[0].place_name);\n      }\n\n      await fetchWeather(lat, lon);\n    })().catch(err => {\n      console.error(err);\n    });\n    locationControl.stop(); // map.stopLocate();\n  });\n  map.on("locationerror", function () {\n    alert("Position could not be found");\n  });\n\n  const coordinatesGeocoder = function (query) {\n    // Match anything which looks like\n    // decimal degrees coordinate pair.\n    const matches = query.match(/^[ ]*(?:Lat: )?(-?\\d+\\.?\\d*)[, ]+(?:Lng: )?(-?\\d+\\.?\\d*)[ ]*$/i);\n\n    if (!matches) {\n      return null;\n    }\n\n    function coordinateFeature(lng, lat) {\n      return {\n        center: [lng, lat],\n        geometry: {\n          type: "Point",\n          coordinates: [lng, lat]\n        },\n        place_name: "Lat: " + lat + " Lng: " + lng,\n        place_type: ["coordinate"],\n        properties: {},\n        type: "Feature"\n      };\n    }\n\n    const coord1 = Number(matches[1]);\n    const coord2 = Number(matches[2]);\n    const geocodes = [];\n\n    if (coord1 < -90 || coord1 > 90) {\n      // must be lng, lat\n      geocodes.push(coordinateFeature(coord1, coord2));\n    }\n\n    if (coord2 < -90 || coord2 > 90) {\n      // must be lat, lng\n      geocodes.push(coordinateFeature(coord2, coord1));\n    }\n\n    if (geocodes.length === 0) {\n      // else could be either lng, lat or lat, lng\n      geocodes.push(coordinateFeature(coord1, coord2));\n      geocodes.push(coordinateFeature(coord2, coord1));\n    }\n\n    return geocodes;\n  };\n\n  const results = document.getElementById("destinationResult");\n  const originResult = document.getElementById("originResult"); // Clear results container when search is cleared.\n  // 83.653482  -71.383935\n\n  async function convertAddress(city) {\n    const query = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${city}.json?types=neighborhood,address,place&access_token=pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQybTFoZzE0aDQyeXM1aGNmYnR1MnoifQ.4kRWNfEH_Yao_mmdgrgjPA`, {\n      method: "GET"\n    });\n\n    if (query.status !== 200) {\n      alert(query.status);\n      return;\n    }\n\n    const data = await query.json();\n    return data;\n  }\n\n  async function fetchWeather(lat, lon) {\n    const query = await fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=imperial&appid&appid=6185638fa6045f2f694129e53175d997`, {\n      method: "GET"\n    });\n\n    if (query.status !== 200) {\n      return;\n    }\n\n    map.fitBounds([[lat, lon]], {\n      padding: [100, 100]\n    });\n    const data = await query.json();\n    const imgIcon = data.weather[0].icon;\n    const currentWeather = data.weather[0].main;\n    const temp = data.main.temp;\n    $("#latInputField").val(lat);\n    $("#lonInputField").val(lon);\n    var popup = L.popup({\n      autoPan: true,\n      keepInView: true\n    }).setContent(`<div class="row" >\n    <div class="col">\n      <div class="card">\n        <div class="card-body">\n          <h5 class="card-title">${currentWeather}</h5>\n          <p class="card-text">\n\n            <span>   <img style="max-width: 50px" src="http://openweathermap.org/img/wn/${imgIcon}@2x.png" class="img-fluid rounded-start" alt="..."></span>\n\n            <span>\n              ${temp}°F </span>\n\n          </p>\n\n        </div>\n      </div>\n    </div>\n    </div>`);\n    marker.setLatLng([lat, lon]).bindPopup(popup).openPopup();\n    var alertPlaceholder = document.querySelector(".weather-alert-placeholder");\n\n    function postLog(icon, weather, temperature) {\n      let wrapper = document.createElement("div");\n      wrapper.innerHTML = ` <div\n        class="alert alert-light d-flex align-items-center"\n        role="alert"\n        >\n        <img\n          style="max-width: 50px"\n          src="http://openweathermap.org/img/wn/${imgIcon}@2x.png"\n          alt=""\n          srcset=""\n        />\n        ${currentWeather} and ${temp}°F\n        </div>`;\n      alertPlaceholder.append(wrapper);\n    }\n\n    if (alertPlaceholder.childElementCount == 0) {\n      postLog(` <img\n    style="max-width: 50px"\n    src="http://openweathermap.org/img/wn/${imgIcon}@2x.png"\n    alt=""\n    srcset=""\n    />\n    ${currentWeather} and ${temp}°F`);\n    } else if (alertPlaceholder.childElementCount == 1) {\n      postLog(` <img\n    style="max-width: 50px"\n    src="http://openweathermap.org/img/wn/${imgIcon}@2x.png"\n    alt=""\n    srcset=""\n    />\n    ${currentWeather} and ${temp}°F`);\n    } else if (alertPlaceholder.childElementCount == 2) {\n      $("#liveAlertPlaceholder").empty();\n      setTimeout(() => {\n        postLog(` <img\n    style="max-width: 50px"\n    src="http://openweathermap.org/img/wn/${imgIcon}@2x.png"\n    alt=""\n    srcset=""\n    />\n    ${currentWeather} and ${temp}°F`);\n      }, 200);\n    }\n\n    if ($("#output-field-input").hasClass("is-invalid")) {\n      $("#output-field-input").removeClass("is-invalid");\n    }\n  }\n\n  $("#findWeatherForm").on("submit", async function (e) {\n    e.preventDefault();\n    let inputs = e.currentTarget.elements;\n    const result = await convertAddress($(this).find("input:eq(0)").val()); //\n\n    if (result.features[0]) {\n      if ($(".alert-warning").hasClass("visible")) {\n        $(".alert-warning").removeClass("visible").addClass("invisible");\n      }\n\n      let coords = result.features[0].center;\n      let lat = coords[1];\n      let lon = coords[0];\n      CoordsApp.state.origin = coords;\n      await fetchWeather(lat, lon);\n    } else {\n      $(".alert-warning").removeClass("invisible").addClass("visible");\n    }\n    /*\n    for (i = 0; i < inputs.length; i++) {\n      if (inputs[i].nodeName === "INPUT" && inputs[i].type === "search") {\n        // Update text input\n        const result = await convertAddress(inputs[i].value);\n        if (result.features[0]) {\n          let coords = result.features[0].center;\n             let lat = coords[1];\n          let lon = coords[0];\n           CoordsApp.state.origin = coords;\n           await fetchWeather(lat, lon);\n        } else if (!result.features[0]) {\n          alert("no address found");\n        }\n      }\n    }*/\n\n  });\n\n  async function convertLatLon(lat, lon) {\n    const query = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lon},${lat}.json?types=neighborhood,address,place&access_token=pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQybTFoZzE0aDQyeXM1aGNmYnR1MnoifQ.4kRWNfEH_Yao_mmdgrgjPA`, {\n      method: "GET"\n    });\n\n    if (query.status !== 200) {\n      return;\n    }\n\n    const data = await query.json();\n\n    if (data.features.length == 0) {\n      $(".alert-warning").removeClass("invisible").addClass("visible");\n    } else if (data.features.length > 0 && $(".alert-warning").hasClass("visible")) {\n      $(".alert-warning").removeClass("visible").addClass("invisible");\n    }\n\n    return data;\n  }\n\n  $("#findWeatherAddressForm").on("submit", async function (e) {\n    e.preventDefault();\n    const query = encodeURI(e.currentTarget[0].value);\n    const latLon = await convertAddress(query);\n    let lat = latLon.features[0].center[1];\n    let lon = latLon.features[0].center[0];\n    $("#latInputField").val(lat);\n    $("#lonInputField").val(lon);\n    map.fitBounds([[lat, lon]], {\n      padding: [100, 100]\n    });\n    const weather = await latLonWeather(lat, lon);\n    const imgIcon = weather.weather[0].icon;\n    const currentWeather = weather.weather[0].main;\n    const temp = weather.main.temp;\n    var popup = L.popup({\n      autoPan: true,\n      keepInView: true\n    }).setContent(`<div class="row" >\n    <div class="col">\n      <div class="card">\n        <div class="card-body">\n          <h5 class="card-title">${currentWeather}</h5>\n          <p class="card-text">\n\n            <span>   <img style="max-width: 50px" src="http://openweathermap.org/img/wn/${imgIcon}@2x.png" class="img-fluid rounded-start" alt="..."></span>\n\n            <span>\n              ${temp}°F </span>\n\n          </p>\n\n        </div>\n      </div>\n    </div>\n  </div>`);\n    marker.setLatLng([lat, lon]).bindPopup(popup).openPopup();\n    var alertPlaceholder = document.querySelector(".weather-alert-placeholder");\n\n    function postLog(icon, weather, temperature) {\n      let wrapper = document.createElement("div");\n      wrapper.innerHTML = ` <div\n        class="alert alert-light d-flex align-items-center"\n        role="alert"\n        >\n        <img\n          style="max-width: 50px"\n          src="http://openweathermap.org/img/wn/${imgIcon}@2x.png"\n          alt=""\n          srcset=""\n        />\n        ${currentWeather} and ${temp}°F\n        </div>`;\n      alertPlaceholder.append(wrapper);\n    }\n\n    if (alertPlaceholder.childElementCount == 0) {\n      postLog(` <img\nstyle="max-width: 50px"\nsrc="http://openweathermap.org/img/wn/${imgIcon}@2x.png"\nalt=""\nsrcset=""\n/>\n${currentWeather} and ${temp}°F`);\n    } else if (alertPlaceholder.childElementCount == 1) {\n      postLog(` <img\nstyle="max-width: 50px"\nsrc="http://openweathermap.org/img/wn/${imgIcon}@2x.png"\nalt=""\nsrcset=""\n/>\n${currentWeather} and ${temp}°F`);\n    } else if (alertPlaceholder.childElementCount == 2) {\n      $("#liveAlertPlaceholder").empty();\n      setTimeout(() => {\n        postLog(` <img\n  style="max-width: 50px"\n  src="http://openweathermap.org/img/wn/${imgIcon}@2x.png"\n  alt=""\n  srcset=""\n/>\n${currentWeather} and ${temp}°F`);\n      }, 200);\n    }\n  });\n  $("#latlonForm").on("submit", async function (e) {\n    e.preventDefault();\n    let lat = e.currentTarget[0].value;\n    let lon = e.currentTarget[1].value;\n    const coords = await convertLatLon(lat, lon);\n    await fetchWeather(lat, lon);\n\n    if (coords.features.length == 0) {\n      $(".target-address").val("");\n    } else if (coords.features.length > 0) {\n      $(".target-address").val(coords.features[0].place_name);\n    }\n    /*\n    setTimeout(() => {\n      const alertMessage = `\n      <div class="alert alert-primary d-flex align-items-center" role="alert">\n      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">\n      <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>\n      </svg>\n      <div>\n      No Address Found\n      </div>\n      </div>\n       `;\n       let address =\n        coords.features.length > 0 ? coords.features[0].place_name : "";\n       $("input")\n        .first()\n        .val(address);\n       let alertHtml = coords.features.length > 0 ? "" : alertMessage;\n      $(".alerts").html(alertHtml);\n       var popup = L.popup({ autoPan: true, keepInView: true })\n        .setContent(`<div class="row" >\n    <div class="col">\n      <div class="card">\n        <div class="card-body">\n          <h5 class="card-title">${currentWeather}</h5>\n          <p class="card-text">\n             <span>   <img style="max-width: 50px" src="http://openweathermap.org/img/wn/${imgIcon}@2x.png" class="img-fluid rounded-start" alt="..."></span>\n             <span>\n              ${temp}°F </span>\n           </p>\n         </div>\n      </div>\n    </div>\n    </div>`);\n       marker\n        .setLatLng([lat, lon])\n        .bindPopup(popup)\n        .openPopup();\n      var alertPlaceholder = document.querySelector(\n        ".weather-alert-placeholder"\n      );\n       function postLog(icon, weather, temperature) {\n        let wrapper = document.createElement("div");\n        wrapper.innerHTML = ` <div\n          class="alert alert-light d-flex align-items-center"\n          role="alert"\n          >\n          <img\n            style="max-width: 50px"\n            src="http://openweathermap.org/img/wn/${imgIcon}@2x.png"\n            alt=""\n            srcset=""\n          />\n          ${currentWeather} and ${temp}°F\n          </div>`;\n         alertPlaceholder.append(wrapper);\n      }\n       if (alertPlaceholder.childElementCount == 0) {\n        postLog(` <img\n    style="max-width: 50px"\n    src="http://openweathermap.org/img/wn/${imgIcon}@2x.png"\n    alt=""\n    srcset=""\n    />\n    ${currentWeather} and ${temp}°F`);\n      } else if (alertPlaceholder.childElementCount == 1) {\n        postLog(` <img\n    style="max-width: 50px"\n    src="http://openweathermap.org/img/wn/${imgIcon}@2x.png"\n    alt=""\n    srcset=""\n    />\n    ${currentWeather} and ${temp}°F`);\n      } else if (alertPlaceholder.childElementCount == 2) {\n        $("#liveAlertPlaceholder").empty();\n        setTimeout(() => {\n          postLog(` <img\n    style="max-width: 50px"\n    src="http://openweathermap.org/img/wn/${imgIcon}@2x.png"\n    alt=""\n    srcset=""\n    />\n    ${currentWeather} and ${temp}°F`);\n        }, 200);\n      }\n    }, 500);\n    */\n\n  });\n\n  function addRoute() {\n    App.state.count++;\n    const origin = CoordsApp.state.origin;\n    const destination = CoordsApp.state.destination; //map.flyTo([centerLat, centerLon])\n\n    /* map.panInsideBounds([\n         [origin[1] , origin[0] ], // southwestern corner of the bounds\n         [destination[1] , destination[0], {padding: [50,50]} ] // northeastern corner of the bounds\n       ]);\n       //\n       geojson.features[0].geometry.coordinates = [origin[0], origin[1]];\n      geojson.features[1].geometry.coordinates = [destination[0], destination[1]]\n    */\n    //\n\n    let latD = destination[1];\n    let lonD = destination[0];\n    let latO = origin[1];\n    let lonO = origin[0];\n    geojson.features[0].geometry.coordinates = [lonO, latO];\n    geojson.features[1].geometry.coordinates = [lonD, latD]; //\n\n    featureLayer.setGeoJSON(geojson).addTo(map); //featureLayer.setGeoJSON(geojson).addTo(map);\n\n    /*\n      map.fitBounds(featureLayer.getBounds(), {\n    padding: [50,50]\n       });\n      map.zoomOut()\n    */\n\n    let latOrigin = origin[1];\n    let lonOrigin = origin[0];\n    let latDest = destination[1];\n    let lonDest = destination[0]; //\n\n    map.fitBounds([[latOrigin, lonOrigin], [latDest, lonDest]], {\n      padding: [50, 50]\n    });\n  }\n\n  function addNewRoute() {\n    const origin = CoordsApp.state.origin;\n    const destination = CoordsApp.state.destination;\n    let latD = destination[1];\n    let lonD = destination[0];\n    let latO = origin[1];\n    let lonO = origin[0];\n    geojson.features[0].geometry.coordinates = [lonO, latO];\n    geojson.features[1].geometry.coordinates = [lonD, latD];\n    featureLayer.setGeoJSON(geojson); // A simple line from origin to destination.\n    // A single point that animates along the route.\n    // Coordinates are initially set to origin.\n    // Calculate the distance in kilometers between route start/end point.\n    // animate(counter);\n\n    featureLayer.setGeoJSON(geojson);\n    let latOrigin = origin[1];\n    let lonOrigin = origin[0];\n    let latDest = destination[1];\n    let lonDest = destination[0]; //\n\n    map.fitBounds([[latOrigin, lonOrigin], [latDest, lonDest]], {\n      padding: [50, 50]\n    });\n  }\n\n  function format(time) {\n    // Hours, minutes and seconds\n    var hrs = ~~(time / 3600);\n    var mins = ~~(time % 3600 / 60);\n    let result = {\n      hours: hrs,\n      minutes: mins\n    }; // Output like "1:01" or "4:03:59" or "123:03:59"\n\n    return result;\n  }\n\n  function callMatrix(first, second) {\n    fetch(`https://api.mapbox.com/directions-matrix/v1/mapbox/driving/${first};${second}?&access_token=pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQycnlhMDBlb2kydXBwZHoyOGNsY3EifQ.E8N4lPy6tiI0xY3nor3MTg`).then(response => response.json()).then(json => {\n      const durations = json.durations[0];\n      const travelTime = durations[1];\n      const result = format(travelTime); // //\n\n      var alertPlaceholder = document.getElementById("liveAlertPlaceholder");\n      var alertTrigger = document.getElementById("liveAlertBtn");\n\n      function postLog(message) {\n        var wrapper = document.createElement("div");\n        wrapper.innerHTML = `\n    <div class="alert alert-secondary d-flex align-items-center justify-content-between" role="alert">\n     <div class="alertMessage">\n       ${message}\n     </div>\n\n\n   </div>`;\n        alertPlaceholder.append(wrapper);\n      }\n\n      if (alertPlaceholder.childElementCount == 0) {\n        postLog(`${result.hours} hour(s) and ${result.minutes} minutes`);\n      } else if (alertPlaceholder.childElementCount == 1) {\n        postLog(`${result.hours} hour(s) and ${result.minutes} minutes`);\n      } else if (alertPlaceholder.childElementCount == 2) {\n        $("#liveAlertPlaceholder").empty();\n        setTimeout(() => {\n          postLog(`${result.hours} hour(s) and ${result.minutes}`);\n        }, 200);\n      }\n    });\n  }\n\n  function getUserLocation() {\n    if ("geolocation" in navigator) {\n      function success(position) {\n        let lat = position.coords.latitude;\n        let lon = position.coords.longitude; //\n\n        map.flyTo([lat, lon], 11);\n        geojson.features[0].geometry.coordinates = [lon, lat]; //\n\n        featureLayer.setGeoJSON(geojson).addTo(map);\n        CoordsApp.state.userLocation = [lon, lat]; //alert(lat)\n      }\n\n      function error(err) {\n        console.warn(`ERROR(${err.code}): ${err.message}`);\n      }\n\n      var options = {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n      };\n      navigator.geolocation.getCurrentPosition(success, error, options);\n    } else {////\n    }\n  } // getUserLocation();\n\n\n  const title = $("title").html();\n  const pageTitle = title.slice(11);\n  let bookmarkControl = new L.Control.Bookmarks({\n    name: pageTitle\n  }).addTo(map);\n});\n\n//# sourceURL=webpack:///./src/js/weather.js?')}});