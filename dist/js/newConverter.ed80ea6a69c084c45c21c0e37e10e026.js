/*!
* GeoTools
* Boilerplate for a Static website using EJS and SASS
* example.com
* @author Brenton Cozby -- https://brentoncozby.com
* Copyright 2022. MIT Licensed.
*/

!function(n){var e={};function t(a){if(e[a])return e[a].exports;var l=e[a]={i:a,l:!1,exports:{}};return n[a].call(l.exports,l,l.exports,t),l.l=!0,l.exports}t.m=n,t.c=e,t.d=function(n,e,a){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:a})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(t.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var l in n)t.d(a,l,function(e){return n[e]}.bind(null,l));return a},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="/js/",t(t.s=36)}({36:function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(37);\n\n\n//# sourceURL=webpack:///multi_./src/js/newConverter.js?")},37:function(module,exports){eval('/*jshint esversion: 8 */\nfunction test(e) {\n  e.preventDefault();\n}\n\nwindow.addEventListener("DOMContentLoaded", () => {\n  let scrollPos = 0;\n  const mainNav = document.getElementById("mainNav");\n  const headerHeight = mainNav.clientHeight;\n});\n$(document).ready(function () {\n  const north = document.getElementById("north");\n  const south = document.getElementById("south");\n  const degreesLat = document.getElementById("degrees-lat");\n  const minutesLat = document.getElementById("minutes-lat");\n  const secondsLat = document.getElementById("seconds-lat");\n  const degreesLon = document.getElementById("degrees-lon");\n  const minutesLon = document.getElementById("minutes-lon");\n  const secondsLon = document.getElementById("seconds-lon");\n  const east = document.getElementById("east");\n  const west = document.getElementById("west");\n  const outputInputField = document.getElementById("output-field-input");\n  const dmsBtn = document.getElementById("dmsBtn");\n  const dmsForm = document.getElementById("dms");\n  const latlonForm = document.getElementById("latlonForm");\n\n  async function convertAddress(city) {\n    const query = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${city}.json?access_token=pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQybTFoZzE0aDQyeXM1aGNmYnR1MnoifQ.4kRWNfEH_Yao_mmdgrgjPA`, {\n      method: "GET"\n    });\n\n    if (query.status !== 200) {\n      alert(query.status);\n      return;\n    }\n\n    const data = await query.json();\n    return data;\n  }\n\n  function ParseDMS(input) {\n    var parts = input.split(/[^\\d\\w]+/);\n    var lat = ConvertDMSToDD(parts[0], parts[1], parts[2], parts[3]);\n    var lng = ConvertDMSToDD(parts[4], parts[5], parts[6], parts[7]);\n  }\n\n  function ParseDMS(input) {\n    var parts = input.split(/[^\\d\\w]+/);\n    var lat = ConvertDMSToDD(parts[0], parts[1], parts[2], parts[3]);\n    var lng = ConvertDMSToDD(parts[4], parts[5], parts[6], parts[7]);\n  }\n\n  function ConvertDMSToDD(arr) {\n    let degrees = arr[0];\n    let minutes = arr[1];\n    let seconds = arr[2];\n    let direction = arr[3];\n    var dd = degrees + minutes / 60 + seconds / (60 * 60);\n\n    if (direction == "S" || direction == "W") {\n      dd = dd * -1;\n    } // Don\'t do anything for N or E\n\n\n    return dd;\n  }\n\n  function DDtoDMS(lat, lon) {\n    //\n    let latitude = Math.abs(lat);\n    let longitude = Math.abs(lon);\n    let dLat = Math.floor(latitude);\n    let mLat = Math.floor((latitude - dLat) * 60);\n    sLat = Math.round((latitude - dLat - mLat / 60) * 1e3 * 3600) / 1e3;\n    dLon = Math.floor(longitude);\n    mLon = Math.floor((longitude - dLon) * 60);\n    sLon = Math.floor((longitude - dLon - mLon / 60) * 1e3 * 3600) / 1e3;\n    let degreesLatitude = dLat;\n    let minutesLatitude = mLat;\n    let secondsLatitude = sLat;\n    let degreesLongitude = dLon;\n    let minutesLongitude = mLon;\n    let secondsLongitude = sLon;\n    let latResult = `${degreesLatitude}° ${minutesLatitude}\' ${secondsLatitude}\'\'`;\n    let lonResult = `${degreesLongitude}° ${minutesLongitude}\' ${secondsLongitude}\'\'`;\n    let result = {\n      lat: {\n        degrees: degreesLatitude,\n        minutes: minutesLatitude,\n        seconds: secondsLatitude\n      },\n      lon: {\n        degrees: degreesLongitude,\n        minutes: minutesLongitude,\n        seconds: secondsLongitude\n      },\n      popupMessage: {\n        lat: latResult,\n        lon: lonResult\n      }\n    };\n    return result;\n  }\n\n  function check(elm) {\n    document.getElementById(elm).checked = true;\n  }\n\n  const convertLocationData = document.getElementById("convertLocationData");\n  const latInputField = document.getElementById("latInputField");\n  const lonInputField = document.getElementById("lonInputField");\n  const latlonGeocoderBtn = document.getElementById("latlonGeocoderBtn");\n\n  const CoordsApp = function _CoordsApp() {\n    return `\n     <h1>Origin State = [${CoordsApp.state.origin}] </h1> </br>\n     <h1>Destination State = [${CoordsApp.state.destination}] </h1>\n     <h1>User Location = [${CoordsApp.state.userLocation}] </h1>\n     <h1>trackingUser =  ${CoordsApp.state.trackingUser}</h1>\n    `;\n  };\n\n  const myhandler = {\n    set: function (obj, prop, value) {\n      obj[prop] = value;\n    }\n  };\n  CoordsApp.state = new Proxy({\n    origin: [],\n    destination: [],\n    userLocation: [],\n    trackingUser: false\n  }, myhandler);\n  L.mapbox.accessToken = "pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQybTFoZzE0aDQyeXM1aGNmYnR1MnoifQ.4kRWNfEH_Yao_mmdgrgjPA";\n  const map = L.mapbox.map("map").setView([37.9, -77], 6);\n  L.mapbox.styleLayer("mapbox://styles/mapbox/streets-v11").addTo(map); // add your tiles to the map\n  // L.marker is a low-level marker constructor in Leaflet.\n\n  const marker = L.marker([0, 0], {\n    icon: L.mapbox.marker.icon({\n      "marker-size": "large",\n      "marker-color": "blue"\n    })\n  }).addTo(map);\n  var locationControl = L.control.locate({\n    circleStyle: {\n      opacity: 0\n    },\n    followCircleStyle: {\n      opacity: 0\n    },\n    drawCircle: false,\n    follow: false,\n    icon: "fas fa-map-marker-alt",\n    // follow the user\'s location\n    setView: false,\n    remainActive: false\n  }).addTo(map);\n\n  async function findAddress(lat, lon) {\n    const query = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lon},${lat}.json?access_token=pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQycnlhMDBlb2kydXBwZHoyOGNsY3EifQ.E8N4lPy6tiI0xY3nor3MTg`, {\n      method: "GET"\n    });\n\n    if (query.status !== 200) {\n      return;\n    }\n\n    const data = await query.json();\n    return data;\n  }\n\n  map.on("locationfound", async function (e) {\n    let lat = e.latitude;\n    let lon = e.longitude;\n    var radius = e.accuracy;\n    const result = await findAddress(lat, lon);\n    let address = result.features.length > 0 ? result.features[0].place_name : "";\n    localStorage.setItem("userLatLon", `${lat}, ${lon}`);\n    $("#searchInput").val(address);\n    const alertMessage = `\n    <div class="alert alert-primary d-flex align-items-center" role="alert">\n    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">\n    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>\n    </svg>\n    <div>\n    No Address Found\n    </div>\n    </div>\n\n    `;\n    let alertHtml = result.features.length > 0 ? "" : alertMessage;\n    $(".alerts").html(alertHtml);\n    locationControl.stop();\n    $("#latInputField").val(lat);\n    $("#lonInputField").val(lon);\n    north.checked = lat >= 0 ? true : false;\n    south.check = lat < 0 ? true : false;\n    east.checked = lon >= 0 ? true : false;\n    west.checked = lon < 0 ? true : false;\n    const dmsCalculated = DDtoDMS(lat, lon);\n    document.getElementById("degrees-lat").value = dmsCalculated.lat.degrees;\n    document.getElementById("minutes-lat").value = dmsCalculated.lat.minutes;\n    document.getElementById("seconds-lat").value = dmsCalculated.lat.seconds;\n    document.getElementById("degrees-lon").value = dmsCalculated.lon.degrees;\n    document.getElementById("minutes-lon").value = dmsCalculated.lon.minutes;\n    document.getElementById("seconds-lon").value = dmsCalculated.lon.seconds;\n    map.fitBounds([[lat, lon]], {\n      padding: [100, 100]\n    });\n    var popup = L.popup({\n      autoPan: true,\n      keepInView: true\n    }).setContent(`\n    <div class="row">\n    <div class="col">\n      <div class="card">\n        <div class="card-body">\n        <h5 class="card-title">${address}</h5>\n          <p class="card-text">\n\n\n\n          <span><strong> Latitude: </strong> <span class="lat">${lat} </span></span> <span> <strong>\n          Longitude:</strong> <span class="lon">${lon}</span> </span>\n          <br>\n          <div class= "mt-1">\n          ${dmsCalculated.popupMessage.lat} ${dmsCalculated.popupMessage.lon}\n        </div>\n          </p>\n          <div class=" mt-2 altitude">\n          <button class="btn btn-primary btn-sm" id="getAltitude" type="button ">\n              Get Altitude\n          </button>\n      </div>\n        </div>\n      </div>\n    </div>\n</div>\n\n\n  `);\n    marker.setLatLng([lat, lon]).bindPopup(popup).openPopup();\n  });\n  map.on("locationerror", function () {\n    alert("Position could not be found");\n  });\n\n  const coordinatesGeocoder = function (query) {\n    // Match anything which looks like\n    // decimal degrees coordinate pair.\n    const matches = query.match(/^[ ]*(?:Lat: )?(-?\\d+\\.?\\d*)[, ]+(?:Lng: )?(-?\\d+\\.?\\d*)[ ]*$/i);\n\n    if (!matches) {\n      return null;\n    }\n\n    function coordinateFeature(lng, lat) {\n      return {\n        center: [lng, lat],\n        geometry: {\n          type: "Point",\n          coordinates: [lng, lat]\n        },\n        place_name: "Lat: " + lat + " Lng: " + lng,\n        place_type: ["coordinate"],\n        properties: {},\n        type: "Feature"\n      };\n    }\n\n    const coord1 = Number(matches[1]);\n    const coord2 = Number(matches[2]);\n    const geocodes = [];\n\n    if (coord1 < -90 || coord1 > 90) {\n      // must be lng, lat\n      geocodes.push(coordinateFeature(coord1, coord2));\n    }\n\n    if (coord2 < -90 || coord2 > 90) {\n      // must be lat, lng\n      geocodes.push(coordinateFeature(coord2, coord1));\n    }\n\n    if (geocodes.length === 0) {\n      // else could be either lng, lat or lat, lng\n      geocodes.push(coordinateFeature(coord1, coord2));\n      geocodes.push(coordinateFeature(coord2, coord1));\n    }\n\n    return geocodes;\n  };\n\n  async function getElevation(lon, lat) {\n    // Construct the API request\n    const query = await fetch(`https://api.mapbox.com/v4/mapbox.mapbox-terrain-v2/tilequery/${lon},${lat}.json?layers=contour&limit=50&access_token=pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQycnlhMDBlb2kydXBwZHoyOGNsY3EifQ.E8N4lPy6tiI0xY3nor3MTg`, {\n      method: "GET"\n    });\n    if (query.status !== 200) return;\n    const data = await query.json(); // Display the longitude and latitude values\n    // Get all the returned features\n\n    const allFeatures = data.features; // For each returned feature, add elevation data to the elevations array\n\n    const elevations = allFeatures.map(feature => feature.properties.ele); // In the elevations array, find the largest value\n\n    const highestElevation = Math.max(...elevations);\n    $(".altitude").html(`<div> ${highestElevation} meters </div>`);\n  }\n\n  $(document).on("click", "#getAltitude", function (e) {\n    e.preventDefault();\n    let lat = $(".lat").html();\n    let lon = $(".lon").html();\n    getElevation(lon, lat);\n  }); // Clear results container when search is cleared.\n\n  function format(time) {\n    // Hours, minutes and seconds\n    var hrs = ~~(time / 3600);\n    var mins = ~~(time % 3600 / 60);\n    let result = {\n      hours: hrs,\n      minutes: mins\n    }; // Output like "1:01" or "4:03:59" or "123:03:59"\n\n    return result;\n  }\n\n  const title = $("title").html();\n  const pageTitle = title.slice(11);\n  let bookmarkControl = new L.Control.Bookmarks({\n    name: pageTitle\n  }).addTo(map); // !! First Form\n\n  $("#addressForm").on("submit", async function (e) {\n    e.preventDefault();\n    const value = $(this).find("input:eq(0)").val();\n    const fetchResponse = await convertAddress(value);\n    let lat = fetchResponse.features[0].geometry.coordinates[1];\n    let lon = fetchResponse.features[0].geometry.coordinates[0];\n    const dmsCalculated = DDtoDMS(lat, lon);\n    setTimeout(() => {\n      if (fetchResponse.features.length > 0) {\n        $("#latlonForm").find("input:eq(0)").val(lat);\n        $("#latlonForm").find("input:eq(1)").val(lon);\n        map.fitBounds([[lat, lon]], {\n          padding: [50, 50]\n        });\n        $("#degrees-lat").val(dmsCalculated.lat.degrees);\n        $("#minutes-lat").val(dmsCalculated.lat.minutes);\n        $("#seconds-lat").val(dmsCalculated.lat.seconds);\n        $("#degrees-lon").val(dmsCalculated.lon.degrees);\n        $("#minutes-lon").val(dmsCalculated.lon.minutes);\n        $("#seconds-lon").val(dmsCalculated.lon.seconds);\n        var popup = L.popup({\n          autoPan: true,\n          keepInView: true\n        }).setContent(`\n        <div class="row">\n        <div class="col">\n          <div class="card">\n            <div class="card-body">\n            <h5 class="card-title">${value}</h5>\n              <p class="card-text">\n\n\n\n              <span><strong> Latitude: </strong> <span class="lat">${lat} </span></span> <span> <strong>\n              Longitude:</strong> <span class="lon">${lon}</span> </span>\n              <br>\n              <div class= "mt-1">\n              ${dmsCalculated.popupMessage.lat} ${dmsCalculated.popupMessage.lon}\n            </div>\n              </p>\n              <div class=" mt-2 altitude">\n              <button class="btn btn-primary btn-sm" id="getAltitude" type="button ">\n                  Get Altitude\n              </button>\n          </div>\n            </div>\n          </div>\n        </div>\n    </div>\n\n\n      `);\n        marker.setLatLng([lat, lon]).bindPopup(popup).openPopup();\n      }\n    }, 200);\n  }); //!! Second Form\n\n  $("#latlonForm").on("submit", async function (e) {\n    e.preventDefault();\n    let latInput = document.getElementById("latInputField");\n    let lonInput = document.getElementById("lonInputField");\n    const lat = e.currentTarget[0].value;\n    const lon = e.currentTarget[1].value;\n    north.checked = lat >= 0 ? true : false;\n    south.check = lat < 0 ? true : false;\n    east.checked = lon >= 0 ? true : false;\n    west.checked = lon < 0 ? true : false;\n    const dmsCalculated = DDtoDMS(lat, lon);\n    const result = await findAddress(lat, lon);\n    let address = result.features.length > 0 ? result.features[0].place_name : "";\n    $("#searchInput").val(address);\n    const alertMessage = `\n    <div class="alert alert-primary d-flex align-items-center" role="alert">\n    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">\n    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>\n    </svg>\n    <div>\n    No Address Found\n    </div>\n    </div>\n\n    `;\n    let alertHtml = result.features.length > 0 ? "" : alertMessage;\n    $(".alerts").html(alertHtml);\n    setTimeout(() => {\n      map.fitBounds([[lat, lon]], {\n        padding: [100, 100]\n      });\n      $("#degrees-lat").val(dmsCalculated.lat.degrees);\n      $("#minutes-lat").val(dmsCalculated.lat.minutes);\n      $("#seconds-lat").val(dmsCalculated.lat.seconds);\n      $("#degrees-lon").val(dmsCalculated.lon.degrees);\n      $("#minutes-lon").val(dmsCalculated.lon.minutes);\n      $("#seconds-lon").val(dmsCalculated.lon.seconds);\n      var popup = L.popup({\n        autoPan: true,\n        keepInView: true\n      }).setContent(`\n  <div class="row">\n  <div class="col">\n    <div class="card">\n      <div class="card-body">\n      <h5 class="card-title">${address}</h5>\n        <p class="card-text">\n\n\n\n        <span><strong> Latitude: </strong> <span class="lat">${lat} </span></span> <span> <strong>\n        Longitude: <span class="lon">${lon}</span></strong> </span>\n        <br>\n        <div class= "mt-1">\n        ${dmsCalculated.popupMessage.lat} ${dmsCalculated.popupMessage.lon}\n      </div>\n        </p>\n        <div class=" mt-2 altitude">\n        <button class="btn btn-primary btn-sm" id="getAltitude" type="button ">\n            Get Altitude\n        </button>\n    </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n`);\n      marker.setLatLng([lat, lon]).bindPopup(popup).openPopup();\n    }, 200);\n  }); //!! Third Form\n\n  $("#myDmsForm").on("submit", async function (e) {\n    e.preventDefault(); // Iterate over the form controls\n\n    let latRadio = north.checked ? "N" : "S";\n    let lonRadio = west.checked ? "W" : "E";\n    let latField = [parseFloat(e.currentTarget[2].value), parseFloat(e.currentTarget[3].value), parseFloat(e.currentTarget[4].value), latRadio];\n    let lonField = [parseFloat(e.currentTarget[7].value), parseFloat(e.currentTarget[8].value), parseFloat(e.currentTarget[9].value), lonRadio];\n    let lat = ConvertDMSToDD(latField);\n    let lon = ConvertDMSToDD(lonField); //let lon = ConvertDMStoDD(lonField)\n\n    lonReduced = lon.toFixed(8);\n    latReduced = lat.toFixed(8);\n    const result = await findAddress(lat, lon);\n    latlonForm.elements[0].value = latReduced;\n    latlonForm.elements[1].value = lonReduced;\n    let address = result.features.length > 0 ? result.features[0].place_name : "";\n    $("#searchInput").val(address);\n    const alertMessage = `\n    <div class="alert alert-primary d-flex align-items-center" role="alert">\n    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">\n    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>\n    </svg>\n    <div>\n    No Address Found\n    </div>\n    </div>\n\n    `;\n    let alertHtml = result.features.length > 0 ? "" : alertMessage;\n    $(".alerts").html(alertHtml);\n    map.fitBounds([[lat, lon]], {\n      padding: [100, 100]\n    });\n    marker.setLatLng([lat, lon]).bindPopup(`\n          <div class="row">\n          <div class="col">\n            <div class="card">\n              <div class="card-body">\n                <h5 class="card-title">${address}</h5>\n                <p class="card-text">\n\n\n\n                <span><strong> Latitude: </strong> <span class="lat">${lat} </span></span> <span> <strong>\n                Longitude: <span class="lon">${lon}</span></strong> </span>\n                <br>\n                <div class= "mt-1">\n                ${latField[0]}° ${latField[1]}\' ${latField[2]}\n                ${lonField[0]}° ${lonField[1]}\' ${lonField[2]}\n              </div>\n                </p>\n                <div class=" mt-2 altitude">\n                <button class="btn btn-primary btn-sm" id="getAltitude" type="button ">\n                    Get Altitude\n                </button>\n            </div>\n              </div>\n            </div>\n          </div>\n    </div>\n\n\n        `).openPopup();\n  });\n});\n\n//# sourceURL=webpack:///./src/js/newConverter.js?')}});