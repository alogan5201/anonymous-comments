<!DOCTYPE html>
<html lang="en" dir="ltr">
  <%- include(`${partials}/head`, {pageTitle: 'page'}); -%>

  <body class="address-to-latlon">
    <!--[if lt IE 8]>
      <p class="browserupgrade">
        You are using an <strong>outdated</strong> browser. Please
        <a href="http://browsehappy.com/">upgrade your browser</a> to improve
        your experience.
      </p>
    <![endif]-->
    <noscript>
      <h3>Please enable JavaScript in order to view this site properly.</h3>
    </noscript>
    <%- include(`${partials}/nav`); -%>
   <div class="text-center">

	<!-- Button HTML (to Trigger Modal) -->

</div>

<!-- Modal HTML -->
<div id="filterCommentSuccess" class="modal fade">
	<div class="modal-dialog modal-confirm success modal-dialog-centered ">
		<div class="modal-content">
			<div class="modal-header">
				<div class="icon-box">
				<i class="fas fa-check"></i>
				</div>
				<h4 class="modal-title w-100">Awesome!</h4>
			</div>
			<div class="modal-body">
				<p class="text-center">Your Comment has been approved</p>
			</div>
			<div class="modal-footer justify-content-center">
        <button type="button" class="btn btn-success" data-bs-dismiss="modal">Close</button>

			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="filterCommentFail" tabindex="-1" aria-labelledby="filterCommentFailLabel" aria-hidden="true">
 	<div class="modal-dialog modal-confirm modal-dialog-centered failure ">
		<div class="modal-content">
			<div class="modal-header">
				<div class="icon-box">
			<i class="fas fa-times"></i>
				</div>
				<h4 class="modal-title w-100">Oops!</h4>
			</div>
			<div class="modal-body">
				<p class="text-center">The content of your message was flagged inappropriate.<br>Please try again. </p>

			</div>
			<div class="modal-footer justify-content-center">
				<div class="modal-footer justify-content-center">
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>

			</div>
			</div>
		</div>
	</div>
</div>
    <!--   !! MAIN -------------------------->
    <!-- Main Content-->
    <main class="mb-4 mt-5">
      <div class="container px-4 px-lg-5">
        <div class="row gx-5 align-items-center justify-content-center">
          <div class="col-lg-5" style="position: relative;">
            <h5 class="text-start mb-4">Address</h5>
            <form
              class="row justify-content-between align-items-center"
              autocomplete="off"
              id="getTravelForm"
            >
              <div class="row justify-content-between align-items-center pe-0">
                <label class="col-sm-2 col-form-label mb-3" for="latInputField"
                  >Address</label
                >
                <div class="col-sm-9">
                  <div class="input-group mb-3">
                    <div class="input-group-prepend">
                      <button
                        id="searchButton"
                        type="button"
                        class="btn btn-outline-primary text-info border border-end-0 ps-3 pe-1 disabled"
                      >
                        <i class="fa fa-search"></i>
                      </button>
                    </div>
                    <input
                      type="search"
                      id="searchInput"
                      class="form-control border border-start-0 target-address"
                      aria-label="Sizing example input"
                      aria-describedby="inputGroup-sizing-default"
                    />
                  </div>
                </div>
              </div>

              <div class="row mb-3 justify-content-end">
                <div
                  class="col-sm-8 position-relative text-end pe-0"
                  style="z-index: 0 !important;"
                >
                  <button class="btn btn-primary" id="getRoute" type="submit">
                    Find
                  </button>
                </div>
              </div>
            </form>
            <form
              class="row mb-3 justify-content-between align-items-center d-none"
              action="post"
              id="geocoderAddressForm"
            >
              <label class="col-sm-2 col-form-label">Address</label>
              <div
                class="col-sm-9 position-relative"
                style="z-index: 2 !important;"
              >
                <div class="geocoder" id="geocoder"></div>
              </div>

              <div class="row mt-3 mb-3 px-0 justify-content-end">
                <div
                  class="col-12 px-0 position-relative text-end"
                  style="z-index: 0 !important;"
                >
                  <button
                    class="btn btn-primary"
                    id="convertLocationData"
                    type="submit"
                  >
                    Find
                  </button>
                </div>
              </div>
            </form>
            <h5 class="text-start mb-4">Latitude and Longitude</h5>
            <form
              class="row g-3 mb-3 justify-content-between align-items-center"
              id="latlonForm"
            >
              <div>
                <div class="row justify-content-between align-items-center">
                  <label class="col-sm-2 col-form-label" for="latInputField"
                    >Latitude</label
                  >
                  <div class="col-sm-9">
                    <input
                      class="form-control"
                      id="latInputField"
                      type="number"
                      step="any"
                      aria-describedby="latInputFeedback"
                      required=""
                    />
                  </div>
                </div>
              </div>
              <div>
                <div class="row justify-content-between align-items-center">
                  <label class="col-sm-2 col-form-label" for="lonInputField"
                    >Longitude</label
                  >
                  <div class="col-sm-9">
                    <input
                      class="form-control"
                      id="lonInputField"
                      type="number"
                      step="any"
                      aria-describedby="lonInputFieldFeedback"
                      required=""
                    />
                  </div>
                </div>
              </div>
            </form>
            <hr class="mb-4" />

            <div class="row mb-3">
              <div id="liveAlertPlaceholder">
                <div class="alerts"></div>
                <div class="history"></div>
              </div>
            </div>
          </div>
          <div class="col-lg-7 align-self-start">
            <h4 class="travel-time"></h4>
            <div class="map-container"><div id="map"></div></div>
          </div>
        </div>
        <%- include(`${partials}/comment-section.ejs`); -%>
      </div>
    </main>

    <!-- Footer-->

    <%- include(`${partials}/footer`); -%>
    <%-include(`${partials}/scripts.ejs`); -%>
    <script src="https://api.mapbox.com/mapbox.js/v3.3.1/mapbox.js"></script>
    <script src="https://api.mapbox.com/mapbox.js/plugins/leaflet-locatecontrol/v0.43.0/L.Control.Locate.min.js"></script>
    <link
      href="https://api.mapbox.com/mapbox.js/plugins/leaflet-locatecontrol/v0.43.0/L.Control.Locate.mapbox.css"
      rel="stylesheet"
    />
    <script src="/leaflet-bookmarks/dist/L.Control.Bookmarks.min.js"></script>
    <script>
      /*jshint esversion: 8 */
      function test(e) {
        e.preventDefault();
      }

      async function convertLatLon(lat, lon) {
        const query = await fetch(
          `https://api.mapbox.com/geocoding/v5/mapbox.places/${lon},${lat}.json?access_token=pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQybTFoZzE0aDQyeXM1aGNmYnR1MnoifQ.4kRWNfEH_Yao_mmdgrgjPA`,
          { method: "GET" }
        );
        if (query.status !== 200) {
          return;
        }

        const data = await query.json();
        if (data.features.length == 0) {
          $(".alert-warning").removeClass("invisible").addClass("visible");
        } else if (
          data.features.length > 0 &&
          $(".alert-warning").hasClass("visible")
        ) {
          $(".alert-warning").removeClass("visible").addClass("invisible");
        }
        return data;
      }

      /*

https://api.mapbox.com/geocoding/v5/mapbox.places/$Atlanta,GA.json?access_token=pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQybTFoZzE0aDQyeXM1aGNmYnR1MnoifQ.4kRWNfEH_Yao_mmdgrgjPA

*/

      async function convertAddress(city) {
        const query = await fetch(
          `https://api.mapbox.com/geocoding/v5/mapbox.places/${city}.json?access_token=pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQybTFoZzE0aDQyeXM1aGNmYnR1MnoifQ.4kRWNfEH_Yao_mmdgrgjPA`,
          { method: "GET" }
        );
        if (query.status !== 200) {
          alert(query.status);
          return;
        }

        const data = await query.json();

        return data;
      }
      window.addEventListener("DOMContentLoaded", () => {
        let scrollPos = 0;
        const mainNav = document.getElementById("mainNav");
        const headerHeight = mainNav.clientHeight;
      });

      $(document).ready(function () {
        const outputInputField = document.getElementById("output-field-input");
        const latInputField = document.getElementById("latInputField");
        const lonInputField = document.getElementById("lonInputField");

        function DDtoDMS(lat, lon) {
          //

          let latitude = Math.abs(lat);
          let longitude = Math.abs(lon);
          let dLat = Math.floor(latitude);
          let mLat = Math.floor((latitude - dLat) * 60);

          sLat = Math.round((latitude - dLat - mLat / 60) * 1e3 * 3600) / 1e3;
          dLon = Math.floor(longitude);
          mLon = Math.floor((longitude - dLon) * 60);
          sLon = Math.floor((longitude - dLon - mLon / 60) * 1e3 * 3600) / 1e3;
          let degreesLatitude = dLat;
          let minutesLatitude = mLat;
          let secondsLatitude = sLat;
          let degreesLongitude = dLon;
          let minutesLongitude = mLon;
          let secondsLongitude = sLon;

          let latResult = `${degreesLatitude}° ${minutesLatitude}' ${secondsLatitude}''`;

          let lonResult = `${degreesLongitude}° ${minutesLongitude}' ${secondsLongitude}''`;
          let result = { lat: latResult, lon: lonResult };
          return result;
        }

        const CoordsApp = function _CoordsApp() {
          return `
     <h1>Origin State = [${CoordsApp.state.origin}] </h1> </br>
     <h1>Destination State = [${CoordsApp.state.destination}] </h1>
     <h1>User Location = [${CoordsApp.state.userLocation}] </h1>
     <h1>trackingUser =  ${CoordsApp.state.trackingUser}</h1>
    `;
        };

        const myhandler = {
          set: function (obj, prop, value) {
            obj[prop] = value;
          },
        };

        CoordsApp.state = new Proxy(
          {
            origin: [],
            destination: [],
            userLocation: [],
            trackingUser: false,
          },
          myhandler
        );

        const finishedLoading = () => {
          setTimeout(function () {
            // then, after a half-second, add the class 'hide', which hides
            // it completely and ensures that the user can interact with the
          }, 500);
        };

        L.mapbox.accessToken =
          "pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQybTFoZzE0aDQyeXM1aGNmYnR1MnoifQ.4kRWNfEH_Yao_mmdgrgjPA";
        const map = L.mapbox.map("map").setView([37.9, -77], 6);

        L.mapbox
          .styleLayer("mapbox://styles/mapbox/streets-v11")
          .addTo(map) // add your tiles to the map
          .on("load", finishedLoading);

        const marker = L.marker([0, 0], {
          icon: L.mapbox.marker.icon({
            "marker-size": "large",

            "marker-color": "blue",
          }),
        }).addTo(map);
        var locationControl = L.control
          .locate({
            circleStyle: { opacity: 0 },
            followCircleStyle: { opacity: 0 },
            drawCircle: false,
            follow: false,
            icon: "fas fa-map-marker-alt", // follow the user's location
            setView: false,
            remainActive: false,
          })
          .addTo(map);

        map.on("locationfound", async function (e) {
          let lat = e.latitude;
          let lon = e.longitude;
          var radius = e.accuracy;

          localStorage.setItem("userLatLon", `${lat}, ${lon}`);

          const address = await convertLatLon(lat, lon);
          setTimeout(() => {
            if (address.features.length > 0) {
              $("form")
                .first()
                .find("input:eq(0)")
                .val(address.features[0].place_name);

              $("#latlonForm").find("input:eq(0)").val(lat);
              $("#latlonForm").find("input:eq(1)").val(lon);
            }

            map.fitBounds([[lat, lon]], { padding: [50, 50] });

            const dmsCalculated = DDtoDMS(lat, lon);

            var popup = L.popup({ autoPan: true, keepInView: true })
              .setContent(`
            <div class="row">
            <div class="col">
              <div class="card">
                <div class="card-body">
                  <h5 class="card-title">${address.features[0].place_name}</h5>
                  <p class="card-text">



                  <span><strong> Latitude: </strong> <span class="lat">${lat} </span></span> <span> <strong>
                  Longitude: <span class="lon">${lon}</span></strong> </span>
                  <br>
                  <div class= "mt-1">
                  ${dmsCalculated.lat} ${dmsCalculated.lon}
                </div>
                  </p>
                  <div class=" mt-2 altitude">
                  <button class="btn btn-primary btn-sm" id="getAltitude" type="button ">
                      Get Altitude
                  </button>
              </div>
                </div>
              </div>
            </div>
        </div>


          `);

            marker.setLatLng([lat, lon]).bindPopup(popup).openPopup();
          }, 500);
          locationControl.stop();
          // geocoder.query(`${lat}, ${lon}`);

          // map.stopLocate();
        });

        const coordinatesGeocoder = function (query) {
          // Match anything which looks like
          // decimal degrees coordinate pair.
          const matches = query.match(
            /^[ ]*(?:Lat: )?(-?\d+\.?\d*)[, ]+(?:Lng: )?(-?\d+\.?\d*)[ ]*$/i
          );
          if (!matches) {
            return null;
          }

          function coordinateFeature(lng, lat) {
            return {
              center: [lng, lat],
              geometry: {
                type: "Point",
                coordinates: [lng, lat],
              },
              place_name: "Lat: " + lat + " Lng: " + lng,
              place_type: ["coordinate"],
              properties: {},
              type: "Feature",
            };
          }

          const coord1 = Number(matches[1]);
          const coord2 = Number(matches[2]);
          const geocodes = [];

          if (coord1 < -90 || coord1 > 90) {
            // must be lng, lat
            geocodes.push(coordinateFeature(coord1, coord2));
          }

          if (coord2 < -90 || coord2 > 90) {
            // must be lat, lng
            geocodes.push(coordinateFeature(coord2, coord1));
          }

          if (geocodes.length === 0) {
            // else could be either lng, lat or lat, lng
            geocodes.push(coordinateFeature(coord1, coord2));
            geocodes.push(coordinateFeature(coord2, coord1));
          }

          return geocodes;
        };

        async function getElevation(lon, lat) {
          // Construct the API request
          const query = await fetch(
            `https://api.mapbox.com/v4/mapbox.mapbox-terrain-v2/tilequery/${lon},${lat}.json?layers=contour&limit=50&access_token=pk.eyJ1IjoibG9nYW41MjAxIiwiYSI6ImNrcTQycnlhMDBlb2kydXBwZHoyOGNsY3EifQ.E8N4lPy6tiI0xY3nor3MTg`,
            { method: "GET" }
          );
          if (query.status !== 200) return;
          const data = await query.json();
          // Display the longitude and latitude values

          // Get all the returned features
          const allFeatures = data.features;
          // For each returned feature, add elevation data to the elevations array
          const elevations = allFeatures.map(
            (feature) => feature.properties.ele
          );
          // In the elevations array, find the largest value
          const highestElevation = Math.max(...elevations);
          $(".altitude").html(`<div> ${highestElevation} meters </div>`);
        }
        $(document).on("click", "#getAltitude", function (e) {
          e.preventDefault();
          let lat = $(".lat").html();
          let lon = $(".lon").html();
          getElevation(lon, lat);
        });

        $("#getTravelForm").on("submit", async function (e) {
          e.preventDefault();
          //
          const value = $(this).find("input:eq(0)").val();
          const fetchResponse = await convertAddress(value);

          setTimeout(() => {
            if (fetchResponse.features.length > 0) {
              let lat = fetchResponse.features[0].geometry.coordinates[1];
              let lon = fetchResponse.features[0].geometry.coordinates[0];

              $("#latlonForm").find("input:eq(0)").val(lat);
              $("#latlonForm").find("input:eq(1)").val(lon);

              const dmsCalculated = DDtoDMS(lat, lon);

              map.fitBounds([[lat, lon]], { padding: [50, 50] });

              var popup = L.popup({ autoPan: true, keepInView: true })
                .setContent(`
    <div class="row">
    <div class="col">
      <div class="card">
        <div class="card-body">
          <h5 class="card-title">${value}</h5>
          <p class="card-text">



          <span><strong> Latitude: </strong> <span class="lat">${lat} </span></span> <span> <strong>
          Longitude: <span class="lon">${lon}</span></strong> </span>
          <br>
          <div class= "mt-1">
          ${dmsCalculated.lat} ${dmsCalculated.lon}
        </div>
          </p>
          <div class=" mt-2 altitude">
          <button class="btn btn-primary btn-sm" id="getAltitude" type="button ">
              Get Altitude
          </button>
      </div>
        </div>
      </div>
    </div>
</div>


  `);

              marker.setLatLng([lat, lon]).bindPopup(popup).openPopup();
            }
          }, 200);
        });

        const title = $("title").html();

        const pageTitle = title.slice(11);

        let bookmarkControl = new L.Control.Bookmarks({
          name: pageTitle,
        }).addTo(map);


      });
    </script>
  </body>
</html>
<!-- IE needs 512+ bytes: http://blogs.msdn.com/b/ieinternals/archive/2010/08/19/http-error-pages-in-internet-explorer.aspx -->
